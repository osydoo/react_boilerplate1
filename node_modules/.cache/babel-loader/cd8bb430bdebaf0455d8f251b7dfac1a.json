{"ast":null,"code":"import _defineProperty from \"/home/dongwoo/task/boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/dongwoo/task/boilerplate/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nexport default function useLoading() {\n  const dispatch = useDispatch();\n\n  const _useState = useState({\n    open: false,\n    text: '로딩 중...'\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        loadState = _useState2[0],\n        setLoadState = _useState2[1]; // 메시지 상태메시지\n\n\n  useEffect(() => {\n    // 로딩 중, 에러 발생 메시지 저장 및 대화창 오픈\n    if (isLoading) {\n      setLoadState(_objectSpread({}, loadState, {\n        open: true\n      }));\n    } else if (isError) {\n      setLoadState(_objectSpread({}, loadState, {\n        open: false\n      })); // 임시 아니면 편집불가false -> true변경필요 : 수정\n    } else {\n      setLoadState(_objectSpread({}, loadState, {\n        open: false\n      }));\n    }\n  }, [isError, isLoading]);\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      dispatch();\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [MarketCover, cashReceipt, delay, dispatch, stateDuedate, stateMarket, stateStartdate]);\n  return [{\n    loadState\n  }, setLoadState, dispatch];\n}","map":{"version":3,"sources":["/home/dongwoo/task/boilerplate/src/hooks/useDefault.js"],"names":["useEffect","useState","useSelector","useDispatch","useLoading","dispatch","open","text","loadState","setLoadState","isLoading","isError","handler","setTimeout","delay","clearTimeout","MarketCover","cashReceipt","stateDuedate","stateMarket","stateStartdate"],"mappings":";;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEC,eAAe,SAASC,UAAT,GAAsB;AACpC,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;;AADoC,oBAEFF,QAAQ,CAAC;AACzCK,IAAAA,IAAI,EAAG,KADkC;AAEzCC,IAAAA,IAAI,EAAE;AAFmC,GAAD,CAFN;AAAA;AAAA,QAE7BC,SAF6B;AAAA,QAElBC,YAFkB,kBAKhC;;;AAEJT,EAAAA,SAAS,CAAC,MAAI;AAAE;AACd,QAAGU,SAAH,EAAa;AACXD,MAAAA,YAAY,mBAAKD,SAAL;AAAgBF,QAAAA,IAAI,EAAE;AAAtB,SAAZ;AACD,KAFD,MAEM,IAAGK,OAAH,EAAW;AACfF,MAAAA,YAAY,mBAAKD,SAAL;AAAgBF,QAAAA,IAAI,EAAE;AAAtB,SAAZ,CADe,CAC4B;AAC5C,KAFK,MAED;AACHG,MAAAA,YAAY,mBAAKD,SAAL;AAAgBF,QAAAA,IAAI,EAAE;AAAtB,SAAZ;AACD;AACF,GARQ,EAQN,CAACK,OAAD,EAAUD,SAAV,CARM,CAAT;AAUAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,OAAO,GAAGC,UAAU,CAAC,MAAM;AAC/BR,MAAAA,QAAQ;AACT,KAFyB,EAEvBS,KAFuB,CAA1B;AAGA,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACH,OAAD,CAAZ;AACD,KAFD;AAGD,GAPQ,EAON,CAACI,WAAD,EAAcC,WAAd,EAA2BH,KAA3B,EAAkCT,QAAlC,EAA4Ca,YAA5C,EAA0DC,WAA1D,EAAuEC,cAAvE,CAPM,CAAT;AASA,SAAO,CAAC;AAACZ,IAAAA;AAAD,GAAD,EAAcC,YAAd,EAA4BJ,QAA5B,CAAP;AACD","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\n export default function useLoading() {\n  const dispatch = useDispatch();\n  const [loadState, setLoadState] = useState({\n    open : false,\n    text: '로딩 중...'\n  }); // 메시지 상태메시지\n\n  useEffect(()=>{ // 로딩 중, 에러 발생 메시지 저장 및 대화창 오픈\n    if(isLoading){\n      setLoadState({...loadState, open: true});\n    }else if(isError){\n      setLoadState({...loadState, open: false}); // 임시 아니면 편집불가false -> true변경필요 : 수정\n    }else{\n      setLoadState({...loadState, open: false});\n    }\n  }, [isError, isLoading]);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      dispatch();\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [MarketCover, cashReceipt, delay, dispatch, stateDuedate, stateMarket, stateStartdate]);\n\n  return [{loadState}, setLoadState, dispatch];\n}\n"]},"metadata":{},"sourceType":"module"}