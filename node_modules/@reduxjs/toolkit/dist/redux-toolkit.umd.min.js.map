{"version":3,"file":"redux-toolkit.umd.min.js","sources":["../node_modules/symbol-observable/es/index.js","../node_modules/symbol-observable/es/ponyfill.js","../node_modules/redux/es/redux.js","../node_modules/immer/src/common.js","../node_modules/immer/src/scope.js","../node_modules/immer/src/es5.js","../node_modules/immer/src/proxy.js","../node_modules/immer/src/patches.js","../node_modules/immer/src/immer.js","../node_modules/immer/src/index.js","../node_modules/reselect/es/index.js","../node_modules/redux-devtools-extension/index.js","../src/isPlainObject.ts","../node_modules/redux-thunk/es/index.js","../src/serializableStateInvariantMiddleware.ts","../src/getDefaultMiddleware.ts","../src/createAction.ts","../src/mapBuilders.ts","../src/createReducer.ts","../src/configureStore.ts","../src/createSlice.ts"],"sourcesContent":["/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","import $$observable from 'symbol-observable';\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer;\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers);\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var keys = Object.keys(actionCreators);\n  var boundActionCreators = {};\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error(\"Dispatching while constructing your middleware is not allowed. \" + \"Other middleware would not be applied to this dispatch.\");\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { createStore, combineReducers, bindActionCreators, applyMiddleware, compose, ActionTypes as __DO_NOT_USE__ActionTypes };\n","export const NOTHING =\n\ttypeof Symbol !== \"undefined\"\n\t\t? Symbol(\"immer-nothing\")\n\t\t: {[\"immer-nothing\"]: true}\n\nexport const DRAFTABLE =\n\ttypeof Symbol !== \"undefined\" && Symbol.for\n\t\t? Symbol.for(\"immer-draftable\")\n\t\t: \"__$immer_draftable\"\n\nexport const DRAFT_STATE =\n\ttypeof Symbol !== \"undefined\" && Symbol.for\n\t\t? Symbol.for(\"immer-state\")\n\t\t: \"__$immer_state\"\n\nexport function isDraft(value) {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\nexport function isDraftable(value) {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE]\n\t)\n}\n\nexport function isPlainObject(value) {\n\tif (!value || typeof value !== \"object\") return false\n\tif (Array.isArray(value)) return true\n\tconst proto = Object.getPrototypeOf(value)\n\treturn !proto || proto === Object.prototype\n}\n\nexport function original(value) {\n\tif (value && value[DRAFT_STATE]) {\n\t\treturn value[DRAFT_STATE].base\n\t}\n\t// otherwise return undefined\n}\n\nexport const assign =\n\tObject.assign ||\n\tfunction assign(target, value) {\n\t\tfor (let key in value) {\n\t\t\tif (has(value, key)) {\n\t\t\t\ttarget[key] = value[key]\n\t\t\t}\n\t\t}\n\t\treturn target\n\t}\n\nexport const ownKeys =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj)\n\t\t\t\t)\n\t\t: Object.getOwnPropertyNames\n\nexport function shallowCopy(base, invokeGetters = false) {\n\tif (Array.isArray(base)) return base.slice()\n\tconst clone = Object.create(Object.getPrototypeOf(base))\n\townKeys(base).forEach(key => {\n\t\tif (key === DRAFT_STATE) {\n\t\t\treturn // Never copy over draft state.\n\t\t}\n\t\tconst desc = Object.getOwnPropertyDescriptor(base, key)\n\t\tlet {value} = desc\n\t\tif (desc.get) {\n\t\t\tif (!invokeGetters) {\n\t\t\t\tthrow new Error(\"Immer drafts cannot have computed properties\")\n\t\t\t}\n\t\t\tvalue = desc.get.call(base)\n\t\t}\n\t\tif (desc.enumerable) {\n\t\t\tclone[key] = value\n\t\t} else {\n\t\t\tObject.defineProperty(clone, key, {\n\t\t\t\tvalue,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t})\n\t\t}\n\t})\n\treturn clone\n}\n\nexport function each(value, cb) {\n\tif (Array.isArray(value)) {\n\t\tfor (let i = 0; i < value.length; i++) cb(i, value[i], value)\n\t} else {\n\t\townKeys(value).forEach(key => cb(key, value[key], value))\n\t}\n}\n\nexport function isEnumerable(base, prop) {\n\tconst desc = Object.getOwnPropertyDescriptor(base, prop)\n\treturn !!desc && desc.enumerable\n}\n\nexport function has(thing, prop) {\n\treturn Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\nexport function is(x, y) {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\nexport function clone(obj) {\n\tif (!isDraftable(obj)) return obj\n\tif (Array.isArray(obj)) return obj.map(clone)\n\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\tfor (const key in obj) cloned[key] = clone(obj[key])\n\treturn cloned\n}\n\nexport function deepFreeze(obj) {\n\tif (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) return\n\tObject.freeze(obj)\n\tif (Array.isArray(obj)) obj.forEach(deepFreeze)\n\telse for (const key in obj) deepFreeze(obj[key])\n}\n","import {DRAFT_STATE} from \"./common\"\n\n/** Each scope represents a `produce` call. */\nexport class ImmerScope {\n\tconstructor(parent) {\n\t\tthis.drafts = []\n\t\tthis.parent = parent\n\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tthis.canAutoFreeze = true\n\n\t\t// To avoid prototype lookups:\n\t\tthis.patches = null\n\t}\n\tusePatches(patchListener) {\n\t\tif (patchListener) {\n\t\t\tthis.patches = []\n\t\t\tthis.inversePatches = []\n\t\t\tthis.patchListener = patchListener\n\t\t}\n\t}\n\trevoke() {\n\t\tthis.leave()\n\t\tthis.drafts.forEach(revoke)\n\t\tthis.drafts = null // Make draft-related methods throw.\n\t}\n\tleave() {\n\t\tif (this === ImmerScope.current) {\n\t\t\tImmerScope.current = this.parent\n\t\t}\n\t}\n}\n\nImmerScope.current = null\nImmerScope.enter = function() {\n\treturn (this.current = new ImmerScope(this.current))\n}\n\nfunction revoke(draft) {\n\tdraft[DRAFT_STATE].revoke()\n}\n","\"use strict\"\nimport {\n\teach,\n\thas,\n\tis,\n\tisDraft,\n\tisDraftable,\n\tisEnumerable,\n\tshallowCopy,\n\tDRAFT_STATE\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\n// property descriptors are recycled to make sure we don't create a get and set closure per property,\n// but share them all instead\nconst descriptors = {}\n\nexport function willFinalize(scope, result, isReplaced) {\n\tscope.drafts.forEach(draft => {\n\t\tdraft[DRAFT_STATE].finalizing = true\n\t})\n\tif (!isReplaced) {\n\t\tif (scope.patches) {\n\t\t\tmarkChangesRecursively(scope.drafts[0])\n\t\t}\n\t\t// This is faster when we don't care about which attributes changed.\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n\t// When a child draft is returned, look for changes.\n\telse if (isDraft(result) && result[DRAFT_STATE].scope === scope) {\n\t\tmarkChangesSweep(scope.drafts)\n\t}\n}\n\nexport function createProxy(base, parent) {\n\tconst isArray = Array.isArray(base)\n\tconst draft = clonePotentialDraft(base)\n\teach(draft, prop => {\n\t\tproxyProperty(draft, prop, isArray || isEnumerable(base, prop))\n\t})\n\n\t// See \"proxy.js\" for property documentation.\n\tconst scope = parent ? parent.scope : ImmerScope.current\n\tconst state = {\n\t\tscope,\n\t\tmodified: false,\n\t\tfinalizing: false, // es5 only\n\t\tfinalized: false,\n\t\tassigned: {},\n\t\tparent,\n\t\tbase,\n\t\tdraft,\n\t\tcopy: null,\n\t\trevoke,\n\t\trevoked: false // es5 only\n\t}\n\n\tcreateHiddenProperty(draft, DRAFT_STATE, state)\n\tscope.drafts.push(draft)\n\treturn draft\n}\n\nfunction revoke() {\n\tthis.revoked = true\n}\n\nfunction source(state) {\n\treturn state.copy || state.base\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft, prop) {\n\tconst state = draft[DRAFT_STATE]\n\tif (state && !state.finalizing) {\n\t\tstate.finalizing = true\n\t\tconst value = draft[prop]\n\t\tstate.finalizing = false\n\t\treturn value\n\t}\n\treturn draft[prop]\n}\n\nfunction get(state, prop) {\n\tassertUnrevoked(state)\n\tconst value = peek(source(state), prop)\n\tif (state.finalizing) return value\n\t// Create a draft if the value is unmodified.\n\tif (value === peek(state.base, prop) && isDraftable(value)) {\n\t\tprepareCopy(state)\n\t\treturn (state.copy[prop] = createProxy(value, state))\n\t}\n\treturn value\n}\n\nfunction set(state, prop, value) {\n\tassertUnrevoked(state)\n\tstate.assigned[prop] = true\n\tif (!state.modified) {\n\t\tif (is(value, peek(source(state), prop))) return\n\t\tmarkChanged(state)\n\t\tprepareCopy(state)\n\t}\n\tstate.copy[prop] = value\n}\n\nfunction markChanged(state) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tif (state.parent) markChanged(state.parent)\n\t}\n}\n\nfunction prepareCopy(state) {\n\tif (!state.copy) state.copy = clonePotentialDraft(state.base)\n}\n\nfunction clonePotentialDraft(base) {\n\tconst state = base && base[DRAFT_STATE]\n\tif (state) {\n\t\tstate.finalizing = true\n\t\tconst draft = shallowCopy(state.draft, true)\n\t\tstate.finalizing = false\n\t\treturn draft\n\t}\n\treturn shallowCopy(base)\n}\n\nfunction proxyProperty(draft, prop, enumerable) {\n\tlet desc = descriptors[prop]\n\tif (desc) {\n\t\tdesc.enumerable = enumerable\n\t} else {\n\t\tdescriptors[prop] = desc = {\n\t\t\tconfigurable: true,\n\t\t\tenumerable,\n\t\t\tget() {\n\t\t\t\treturn get(this[DRAFT_STATE], prop)\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tset(this[DRAFT_STATE], prop, value)\n\t\t\t}\n\t\t}\n\t}\n\tObject.defineProperty(draft, prop, desc)\n}\n\nfunction assertUnrevoked(state) {\n\tif (state.revoked === true)\n\t\tthrow new Error(\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\tJSON.stringify(source(state))\n\t\t)\n}\n\n// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\nfunction markChangesSweep(drafts) {\n\t// The natural order of drafts in the `scope` array is based on when they\n\t// were accessed. By processing drafts in reverse natural order, we have a\n\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t// have changed, we can avoid any traversal of its ancestor nodes.\n\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\tconst state = drafts[i][DRAFT_STATE]\n\t\tif (!state.modified) {\n\t\t\tif (Array.isArray(state.base)) {\n\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t} else if (hasObjectChanges(state)) markChanged(state)\n\t\t}\n\t}\n}\n\nfunction markChangesRecursively(object) {\n\tif (!object || typeof object !== \"object\") return\n\tconst state = object[DRAFT_STATE]\n\tif (!state) return\n\tconst {base, draft, assigned} = state\n\tif (!Array.isArray(object)) {\n\t\t// Look for added keys.\n\t\tObject.keys(draft).forEach(key => {\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (base[key] === undefined && !has(base, key)) {\n\t\t\t\tassigned[key] = true\n\t\t\t\tmarkChanged(state)\n\t\t\t} else if (!assigned[key]) {\n\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\tmarkChangesRecursively(draft[key])\n\t\t\t}\n\t\t})\n\t\t// Look for removed keys.\n\t\tObject.keys(base).forEach(key => {\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (draft[key] === undefined && !has(draft, key)) {\n\t\t\t\tassigned[key] = false\n\t\t\t\tmarkChanged(state)\n\t\t\t}\n\t\t})\n\t} else if (hasArrayChanges(state)) {\n\t\tmarkChanged(state)\n\t\tassigned.length = true\n\t\tif (draft.length < base.length) {\n\t\t\tfor (let i = draft.length; i < base.length; i++) assigned[i] = false\n\t\t} else {\n\t\t\tfor (let i = base.length; i < draft.length; i++) assigned[i] = true\n\t\t}\n\t\tfor (let i = 0; i < draft.length; i++) {\n\t\t\t// Only untouched indices trigger recursion.\n\t\t\tif (assigned[i] === undefined) markChangesRecursively(draft[i])\n\t\t}\n\t}\n}\n\nfunction hasObjectChanges(state) {\n\tconst {base, draft} = state\n\n\t// Search for added keys and changed keys. Start at the back, because\n\t// non-numeric keys are ordered by time of definition on the object.\n\tconst keys = Object.keys(draft)\n\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\tconst key = keys[i]\n\t\tconst baseValue = base[key]\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (baseValue === undefined && !has(base, key)) {\n\t\t\treturn true\n\t\t}\n\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t// descriptor is erased. This branch detects any missed changes.\n\t\telse {\n\t\t\tconst value = draft[key]\n\t\t\tconst state = value && value[DRAFT_STATE]\n\t\t\tif (state ? state.base !== baseValue : !is(value, baseValue)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\t// At this point, no keys were added or changed.\n\t// Compare key count to determine if keys were deleted.\n\treturn keys.length !== Object.keys(base).length\n}\n\nfunction hasArrayChanges(state) {\n\tconst {draft} = state\n\tif (draft.length !== state.base.length) return true\n\t// See #116\n\t// If we first shorten the length, our array interceptors will be removed.\n\t// If after that new items are added, result in the same original length,\n\t// those last items will have no intercepting property.\n\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t// the last one\n\tconst descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1)\n\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\tif (descriptor && !descriptor.get) return true\n\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\treturn false\n}\n\nfunction createHiddenProperty(target, prop, value) {\n\tObject.defineProperty(target, prop, {\n\t\tvalue: value,\n\t\tenumerable: false,\n\t\twritable: true\n\t})\n}\n","\"use strict\"\nimport {\n\tassign,\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tisDraft,\n\tshallowCopy,\n\tDRAFT_STATE\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\n// Do nothing before being finalized.\nexport function willFinalize() {}\n\nexport function createProxy(base, parent) {\n\tconst scope = parent ? parent.scope : ImmerScope.current\n\tconst state = {\n\t\t// Track which produce call this is associated with.\n\t\tscope,\n\t\t// True for both shallow and deep changes.\n\t\tmodified: false,\n\t\t// Used during finalization.\n\t\tfinalized: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned: {},\n\t\t// The parent draft state.\n\t\tparent,\n\t\t// The base state.\n\t\tbase,\n\t\t// The base proxy.\n\t\tdraft: null,\n\t\t// Any property proxies.\n\t\tdrafts: {},\n\t\t// The base copy with any updated values.\n\t\tcopy: null,\n\t\t// Called by the `produce` function.\n\t\trevoke: null\n\t}\n\n\tconst {revoke, proxy} = Array.isArray(base)\n\t\t? // [state] is used for arrays, to make sure the proxy is array-ish and not violate invariants,\n\t\t  // although state itself is an object\n\t\t  Proxy.revocable([state], arrayTraps)\n\t\t: Proxy.revocable(state, objectTraps)\n\n\tstate.draft = proxy\n\tstate.revoke = revoke\n\n\tscope.drafts.push(proxy)\n\treturn proxy\n}\n\nconst objectTraps = {\n\tget,\n\thas(target, prop) {\n\t\treturn prop in source(target)\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(source(target))\n\t},\n\tset,\n\tdeleteProperty,\n\tgetOwnPropertyDescriptor,\n\tdefineProperty() {\n\t\tthrow new Error(\"Object.defineProperty() cannot be used on an Immer draft\") // prettier-ignore\n\t},\n\tgetPrototypeOf(target) {\n\t\treturn Object.getPrototypeOf(target.base)\n\t},\n\tsetPrototypeOf() {\n\t\tthrow new Error(\"Object.setPrototypeOf() cannot be used on an Immer draft\") // prettier-ignore\n\t}\n}\n\nconst arrayTraps = {}\neach(objectTraps, (key, fn) => {\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (isNaN(parseInt(prop))) {\n\t\tthrow new Error(\"Immer only supports deleting array indices\") // prettier-ignore\n\t}\n\treturn objectTraps.deleteProperty.call(this, state[0], prop)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (prop !== \"length\" && isNaN(parseInt(prop))) {\n\t\tthrow new Error(\"Immer only supports setting array indices and the 'length' property\") // prettier-ignore\n\t}\n\treturn objectTraps.set.call(this, state[0], prop, value)\n}\n\n// returns the object we should be reading the current value from, which is base, until some change has been made\nfunction source(state) {\n\treturn state.copy || state.base\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft, prop) {\n\tconst state = draft[DRAFT_STATE]\n\tconst desc = Reflect.getOwnPropertyDescriptor(\n\t\tstate ? source(state) : draft,\n\t\tprop\n\t)\n\treturn desc && desc.value\n}\n\nfunction get(state, prop) {\n\tif (prop === DRAFT_STATE) return state\n\tlet {drafts} = state\n\n\t// Check for existing draft in unmodified state.\n\tif (!state.modified && has(drafts, prop)) {\n\t\treturn drafts[prop]\n\t}\n\n\tconst value = source(state)[prop]\n\tif (state.finalized || !isDraftable(value)) {\n\t\treturn value\n\t}\n\n\t// Check for existing draft in modified state.\n\tif (state.modified) {\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value !== peek(state.base, prop)) return value\n\t\t// Store drafts on the copy (when one exists).\n\t\tdrafts = state.copy\n\t}\n\n\treturn (drafts[prop] = createProxy(value, state))\n}\n\nfunction set(state, prop, value) {\n\tif (!state.modified) {\n\t\tconst baseValue = peek(state.base, prop)\n\t\t// Optimize based on value's truthiness. Truthy values are guaranteed to\n\t\t// never be undefined, so we can avoid the `in` operator. Lastly, truthy\n\t\t// values may be drafts, but falsy values are never drafts.\n\t\tconst isUnchanged = value\n\t\t\t? is(baseValue, value) || value === state.drafts[prop]\n\t\t\t: is(baseValue, value) && prop in state.base\n\t\tif (isUnchanged) return true\n\t\tmarkChanged(state)\n\t}\n\tstate.assigned[prop] = true\n\tstate.copy[prop] = value\n\treturn true\n}\n\nfunction deleteProperty(state, prop) {\n\t// The `undefined` check is a fast path for pre-existing keys.\n\tif (peek(state.base, prop) !== undefined || prop in state.base) {\n\t\tstate.assigned[prop] = false\n\t\tmarkChanged(state)\n\t} else if (state.assigned[prop]) {\n\t\t// if an originally not assigned property was deleted\n\t\tdelete state.assigned[prop]\n\t}\n\tif (state.copy) delete state.copy[prop]\n\treturn true\n}\n\n// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n// the same guarantee in ES5 mode.\nfunction getOwnPropertyDescriptor(state, prop) {\n\tconst owner = source(state)\n\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\tif (desc) {\n\t\tdesc.writable = true\n\t\tdesc.configurable = !Array.isArray(owner) || prop !== \"length\"\n\t}\n\treturn desc\n}\n\nfunction markChanged(state) {\n\tif (!state.modified) {\n\t\tstate.modified = true\n\t\tstate.copy = assign(shallowCopy(state.base), state.drafts)\n\t\tstate.drafts = null\n\t\tif (state.parent) markChanged(state.parent)\n\t}\n}\n","import {each, clone} from \"./common\"\nimport {createDraft} from \"./immer\"\n\nexport function generatePatches(state, basePath, patches, inversePatches) {\n\tArray.isArray(state.base)\n\t\t? generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t: generateObjectPatches(state, basePath, patches, inversePatches)\n}\n\nfunction generateArrayPatches(state, basePath, patches, inversePatches) {\n\tlet {base, copy, assigned} = state\n\n\t// Reduce complexity by ensuring `base` is never longer.\n\tif (copy.length < base.length) {\n\t\t;[base, copy] = [copy, base]\n\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t}\n\n\tconst delta = copy.length - base.length\n\n\t// Find the first replaced index.\n\tlet start = 0\n\twhile (base[start] === copy[start] && start < base.length) {\n\t\t++start\n\t}\n\n\t// Find the last replaced index. Search from the end to optimize splice patches.\n\tlet end = base.length\n\twhile (end > start && base[end - 1] === copy[end + delta - 1]) {\n\t\t--end\n\t}\n\n\t// Process replaced indices.\n\tfor (let i = start; i < end; ++i) {\n\t\tif (assigned[i] && copy[i] !== base[i]) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: copy[i]\n\t\t\t})\n\t\t\tinversePatches.push({\n\t\t\t\top: \"replace\",\n\t\t\t\tpath,\n\t\t\t\tvalue: base[i]\n\t\t\t})\n\t\t}\n\t}\n\n\tconst replaceCount = patches.length\n\n\t// Process added indices.\n\tfor (let i = end + delta - 1; i >= end; --i) {\n\t\tconst path = basePath.concat([i])\n\t\tpatches[replaceCount + i - end] = {\n\t\t\top: \"add\",\n\t\t\tpath,\n\t\t\tvalue: copy[i]\n\t\t}\n\t\tinversePatches.push({\n\t\t\top: \"remove\",\n\t\t\tpath\n\t\t})\n\t}\n}\n\nfunction generateObjectPatches(state, basePath, patches, inversePatches) {\n\tconst {base, copy} = state\n\teach(state.assigned, (key, assignedValue) => {\n\t\tconst origValue = base[key]\n\t\tconst value = copy[key]\n\t\tconst op = !assignedValue ? \"remove\" : key in base ? \"replace\" : \"add\"\n\t\tif (origValue === value && op === \"replace\") return\n\t\tconst path = basePath.concat(key)\n\t\tpatches.push(op === \"remove\" ? {op, path} : {op, path, value})\n\t\tinversePatches.push(\n\t\t\top === \"add\"\n\t\t\t\t? {op: \"remove\", path}\n\t\t\t\t: op === \"remove\"\n\t\t\t\t? {op: \"add\", path, value: origValue}\n\t\t\t\t: {op: \"replace\", path, value: origValue}\n\t\t)\n\t})\n}\n\nexport const applyPatches = (draft, patches) => {\n\tfor (const patch of patches) {\n\t\tconst {path, op} = patch\n\t\tconst value = clone(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\n\t\tif (!path.length) throw new Error(\"Illegal state\")\n\n\t\tlet base = draft\n\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\tbase = base[path[i]]\n\t\t\tif (!base || typeof base !== \"object\")\n\t\t\t\tthrow new Error(\"Cannot apply patch, path doesn't resolve: \" + path.join(\"/\")) // prettier-ignore\n\t\t}\n\n\t\tconst key = path[path.length - 1]\n\t\tswitch (op) {\n\t\t\tcase \"replace\":\n\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t// so we use value from the cloned patch\n\t\t\t\tbase[key] = value\n\t\t\t\tbreak\n\t\t\tcase \"add\":\n\t\t\t\tif (Array.isArray(base)) {\n\t\t\t\t\t// TODO: support \"foo/-\" paths for appending to an array\n\t\t\t\t\tbase.splice(key, 0, value)\n\t\t\t\t} else {\n\t\t\t\t\tbase[key] = value\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase \"remove\":\n\t\t\t\tif (Array.isArray(base)) {\n\t\t\t\t\tbase.splice(key, 1)\n\t\t\t\t} else {\n\t\t\t\t\tdelete base[key]\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"Unsupported patch operation: \" + op)\n\t\t}\n\t}\n\n\treturn draft\n}\n","import * as legacyProxy from \"./es5\"\nimport * as modernProxy from \"./proxy\"\nimport {applyPatches, generatePatches} from \"./patches\"\nimport {\n\tassign,\n\teach,\n\thas,\n\tis,\n\tisDraft,\n\tisDraftable,\n\tisEnumerable,\n\tshallowCopy,\n\tDRAFT_STATE,\n\tNOTHING,\n\tdeepFreeze\n} from \"./common\"\nimport {ImmerScope} from \"./scope\"\n\nfunction verifyMinified() {}\n\nconst configDefaults = {\n\tuseProxies:\n\t\ttypeof Proxy !== \"undefined\" &&\n\t\ttypeof Proxy.revocable !== \"undefined\" &&\n\t\ttypeof Reflect !== \"undefined\",\n\tautoFreeze:\n\t\ttypeof process !== \"undefined\"\n\t\t\t? process.env.NODE_ENV !== \"production\"\n\t\t\t: verifyMinified.name === \"verifyMinified\",\n\tonAssign: null,\n\tonDelete: null,\n\tonCopy: null\n}\n\nexport class Immer {\n\tconstructor(config) {\n\t\tassign(this, configDefaults, config)\n\t\tthis.setUseProxies(this.useProxies)\n\t\tthis.produce = this.produce.bind(this)\n\t}\n\tproduce(base, recipe, patchListener) {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(base = defaultBase, ...args) {\n\t\t\t\treturn self.produce(base, draft => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\t// prettier-ignore\n\t\t{\n\t\t\tif (typeof recipe !== \"function\") {\n\t\t\t\tthrow new Error(\"The first or second argument to `produce` must be a function\")\n\t\t\t}\n\t\t\tif (patchListener !== undefined && typeof patchListener !== \"function\") {\n\t\t\t\tthrow new Error(\"The third argument to `produce` must be a function or undefined\")\n\t\t\t}\n\t\t}\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = ImmerScope.enter()\n\t\t\tconst proxy = this.createProxy(base)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) scope.revoke()\n\t\t\t\telse scope.leave()\n\t\t\t}\n\t\t\tif (result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tscope.usePatches(patchListener)\n\t\t\t\t\t\treturn this.processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tscope.revoke()\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tscope.usePatches(patchListener)\n\t\t\treturn this.processResult(result, scope)\n\t\t} else {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === NOTHING) return undefined\n\t\t\tif (result === undefined) result = base\n\t\t\tthis.maybeFreeze(result, true)\n\t\t\treturn result\n\t\t}\n\t}\n\tproduceWithPatches(arg1, arg2, arg3) {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\tconst self = this\n\t\t\treturn (state, ...args) =>\n\t\t\t\tthis.produceWithPatches(state, draft => arg1(draft, ...args))\n\t\t}\n\t\t// non-curried form\n\t\tif (arg3)\n\t\t\tthrow new Error(\"A patch listener cannot be passed to produceWithPatches\")\n\t\tlet patches, inversePatches\n\t\tconst nextState = this.produce(arg1, arg2, (p, ip) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [nextState, patches, inversePatches]\n\t}\n\tcreateDraft(base) {\n\t\tif (!isDraftable(base)) {\n\t\t\tthrow new Error(\"First argument to `createDraft` must be a plain object, an array, or an immerable object\") // prettier-ignore\n\t\t}\n\t\tconst scope = ImmerScope.enter()\n\t\tconst proxy = this.createProxy(base)\n\t\tproxy[DRAFT_STATE].isManual = true\n\t\tscope.leave()\n\t\treturn proxy\n\t}\n\tfinishDraft(draft, patchListener) {\n\t\tconst state = draft && draft[DRAFT_STATE]\n\t\tif (!state || !state.isManual) {\n\t\t\tthrow new Error(\"First argument to `finishDraft` must be a draft returned by `createDraft`\") // prettier-ignore\n\t\t}\n\t\tif (state.finalized) {\n\t\t\tthrow new Error(\"The given draft is already finalized\") // prettier-ignore\n\t\t}\n\t\tconst {scope} = state\n\t\tscope.usePatches(patchListener)\n\t\treturn this.processResult(undefined, scope)\n\t}\n\tsetAutoFreeze(value) {\n\t\tthis.autoFreeze = value\n\t}\n\tsetUseProxies(value) {\n\t\tthis.useProxies = value\n\t\tassign(this, value ? modernProxy : legacyProxy)\n\t}\n\tapplyPatches(base, patches) {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatches(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, draft =>\n\t\t\tapplyPatches(draft, patches.slice(i + 1))\n\t\t)\n\t}\n\t/** @internal */\n\tprocessResult(result, scope) {\n\t\tconst baseDraft = scope.drafts[0]\n\t\tconst isReplaced = result !== undefined && result !== baseDraft\n\t\tthis.willFinalize(scope, result, isReplaced)\n\t\tif (isReplaced) {\n\t\t\tif (baseDraft[DRAFT_STATE].modified) {\n\t\t\t\tscope.revoke()\n\t\t\t\tthrow new Error(\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\") // prettier-ignore\n\t\t\t}\n\t\t\tif (isDraftable(result)) {\n\t\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\t\tresult = this.finalize(result, null, scope)\n\t\t\t\tthis.maybeFreeze(result)\n\t\t\t}\n\t\t\tif (scope.patches) {\n\t\t\t\tscope.patches.push({\n\t\t\t\t\top: \"replace\",\n\t\t\t\t\tpath: [],\n\t\t\t\t\tvalue: result\n\t\t\t\t})\n\t\t\t\tscope.inversePatches.push({\n\t\t\t\t\top: \"replace\",\n\t\t\t\t\tpath: [],\n\t\t\t\t\tvalue: baseDraft[DRAFT_STATE].base\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\t// Finalize the base draft.\n\t\t\tresult = this.finalize(baseDraft, [], scope)\n\t\t}\n\t\tscope.revoke()\n\t\tif (scope.patches) {\n\t\t\tscope.patchListener(scope.patches, scope.inversePatches)\n\t\t}\n\t\treturn result !== NOTHING ? result : undefined\n\t}\n\t/**\n\t * @internal\n\t * Finalize a draft, returning either the unmodified base state or a modified\n\t * copy of the base state.\n\t */\n\tfinalize(draft, path, scope) {\n\t\tconst state = draft[DRAFT_STATE]\n\t\tif (!state) {\n\t\t\tif (Object.isFrozen(draft)) return draft\n\t\t\treturn this.finalizeTree(draft, null, scope)\n\t\t}\n\t\t// Never finalize drafts owned by another scope.\n\t\tif (state.scope !== scope) {\n\t\t\treturn draft\n\t\t}\n\t\tif (!state.modified) {\n\t\t\tthis.maybeFreeze(state.base, true)\n\t\t\treturn state.base\n\t\t}\n\t\tif (!state.finalized) {\n\t\t\tstate.finalized = true\n\t\t\tthis.finalizeTree(state.draft, path, scope)\n\n\t\t\tif (this.onDelete) {\n\t\t\t\t// The `assigned` object is unreliable with ES5 drafts.\n\t\t\t\tif (this.useProxies) {\n\t\t\t\t\tconst {assigned} = state\n\t\t\t\t\tfor (const prop in assigned) {\n\t\t\t\t\t\tif (!assigned[prop]) this.onDelete(state, prop)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst {base, copy} = state\n\t\t\t\t\teach(base, prop => {\n\t\t\t\t\t\tif (!has(copy, prop)) this.onDelete(state, prop)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.onCopy) {\n\t\t\t\tthis.onCopy(state)\n\t\t\t}\n\n\t\t\t// At this point, all descendants of `state.copy` have been finalized,\n\t\t\t// so we can be sure that `scope.canAutoFreeze` is accurate.\n\t\t\tif (this.autoFreeze && scope.canAutoFreeze) {\n\t\t\t\tObject.freeze(state.copy)\n\t\t\t}\n\n\t\t\tif (path && scope.patches) {\n\t\t\t\tgeneratePatches(state, path, scope.patches, scope.inversePatches)\n\t\t\t}\n\t\t}\n\t\treturn state.copy\n\t}\n\t/**\n\t * @internal\n\t * Finalize all drafts in the given state tree.\n\t */\n\tfinalizeTree(root, rootPath, scope) {\n\t\tconst state = root[DRAFT_STATE]\n\t\tif (state) {\n\t\t\tif (!this.useProxies) {\n\t\t\t\t// Create the final copy, with added keys and without deleted keys.\n\t\t\t\tstate.copy = shallowCopy(state.draft, true)\n\t\t\t}\n\t\t\troot = state.copy\n\t\t}\n\n\t\tconst needPatches = !!rootPath && !!scope.patches\n\t\tconst finalizeProperty = (prop, value, parent) => {\n\t\t\tif (value === parent) {\n\t\t\t\tthrow Error(\"Immer forbids circular references\")\n\t\t\t}\n\n\t\t\t// In the `finalizeTree` method, only the `root` object may be a draft.\n\t\t\tconst isDraftProp = !!state && parent === root\n\n\t\t\tif (isDraft(value)) {\n\t\t\t\tconst path =\n\t\t\t\t\tisDraftProp && needPatches && !state.assigned[prop]\n\t\t\t\t\t\t? rootPath.concat(prop)\n\t\t\t\t\t\t: null\n\n\t\t\t\t// Drafts owned by `scope` are finalized here.\n\t\t\t\tvalue = this.finalize(value, path, scope)\n\n\t\t\t\t// Drafts from another scope must prevent auto-freezing.\n\t\t\t\tif (isDraft(value)) {\n\t\t\t\t\tscope.canAutoFreeze = false\n\t\t\t\t}\n\n\t\t\t\t// Preserve non-enumerable properties.\n\t\t\t\tif (Array.isArray(parent) || isEnumerable(parent, prop)) {\n\t\t\t\t\tparent[prop] = value\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty(parent, prop, {value})\n\t\t\t\t}\n\n\t\t\t\t// Unchanged drafts are never passed to the `onAssign` hook.\n\t\t\t\tif (isDraftProp && value === state.base[prop]) return\n\t\t\t}\n\t\t\t// Unchanged draft properties are ignored.\n\t\t\telse if (isDraftProp && is(value, state.base[prop])) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\t\t\telse if (isDraftable(value) && !Object.isFrozen(value)) {\n\t\t\t\teach(value, finalizeProperty)\n\t\t\t\tthis.maybeFreeze(value)\n\t\t\t}\n\n\t\t\tif (isDraftProp && this.onAssign) {\n\t\t\t\tthis.onAssign(state, prop, value)\n\t\t\t}\n\t\t}\n\n\t\teach(root, finalizeProperty)\n\t\treturn root\n\t}\n\tmaybeFreeze(value, deep = false) {\n\t\tif (this.autoFreeze && !isDraft(value)) {\n\t\t\tif (deep) deepFreeze(value)\n\t\t\telse Object.freeze(value)\n\t\t}\n\t}\n}\n","import {Immer} from \"./immer\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches = immer.produceWithPatches.bind(immer)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * By default, auto-freezing is disabled in production.\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\nexport {\n\toriginal,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable\n} from \"./common\"\n\nexport {Immer}\n","function defaultEqualityCheck(a, b) {\n  return a === b;\n}\n\nfunction areArgumentsShallowlyEqual(equalityCheck, prev, next) {\n  if (prev === null || next === null || prev.length !== next.length) {\n    return false;\n  }\n\n  // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n  var length = prev.length;\n  for (var i = 0; i < length; i++) {\n    if (!equalityCheck(prev[i], next[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function defaultMemoize(func) {\n  var equalityCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultEqualityCheck;\n\n  var lastArgs = null;\n  var lastResult = null;\n  // we reference arguments instead of spreading them for performance reasons\n  return function () {\n    if (!areArgumentsShallowlyEqual(equalityCheck, lastArgs, arguments)) {\n      // apply arguments instead of spreading for performance.\n      lastResult = func.apply(null, arguments);\n    }\n\n    lastArgs = arguments;\n    return lastResult;\n  };\n}\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep;\n    }).join(', ');\n    throw new Error('Selector creators expect all input-selectors to be functions, ' + ('instead received the following types: [' + dependencyTypes + ']'));\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptions[_key - 1] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, funcs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var recomputations = 0;\n    var resultFunc = funcs.pop();\n    var dependencies = getDependencies(funcs);\n\n    var memoizedResultFunc = memoize.apply(undefined, [function () {\n      recomputations++;\n      // apply arguments instead of spreading for performance.\n      return resultFunc.apply(null, arguments);\n    }].concat(memoizeOptions));\n\n    // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n    var selector = memoize(function () {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        params.push(dependencies[i].apply(null, arguments));\n      }\n\n      // apply arguments instead of spreading for performance.\n      return memoizedResultFunc.apply(null, params);\n    });\n\n    selector.resultFunc = resultFunc;\n    selector.dependencies = dependencies;\n    selector.recomputations = function () {\n      return recomputations;\n    };\n    selector.resetRecomputations = function () {\n      return recomputations = 0;\n    };\n    return selector;\n  };\n}\n\nexport var createSelector = createSelectorCreator(defaultMemoize);\n\nexport function createStructuredSelector(selectors) {\n  var selectorCreator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createSelector;\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + ('where each property is a selector, instead received a ' + typeof selectors));\n  }\n  var objectKeys = Object.keys(selectors);\n  return selectorCreator(objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n}","\"use strict\";\n\nvar compose = require('redux').compose;\n\nexports.__esModule = true;\nexports.composeWithDevTools = (\n  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ :\n    function() {\n      if (arguments.length === 0) return undefined;\n      if (typeof arguments[0] === 'object') return compose;\n      return compose.apply(null, arguments);\n    }\n);\n\nexports.devToolsEnhancer = (\n  typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__ ?\n    window.__REDUX_DEVTOOLS_EXTENSION__ :\n    function() { return function(noop) { return noop; } }\n);\n","/**\r\n * Returns true if the passed value is \"plain\" object, i.e. an object whose\r\n * protoype is the root `Object.prototype`. This includes objects created\r\n * using object literals, but not for instance for class instances.\r\n *\r\n * @param {any} value The value to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\r\nexport default function isPlainObject(value: unknown): value is object {\r\n  if (typeof value !== 'object' || value === null) return false\r\n\r\n  let proto = value\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto)\r\n  }\r\n\r\n  return Object.getPrototypeOf(value) === proto\r\n}\r\n","function createThunkMiddleware(extraArgument) {\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        if (typeof action === 'function') {\n          return action(dispatch, getState, extraArgument);\n        }\n\n        return next(action);\n      };\n    };\n  };\n}\n\nvar thunk = createThunkMiddleware();\nthunk.withExtraArgument = createThunkMiddleware;\n\nexport default thunk;","import isPlainObject from './isPlainObject'\r\nimport { Middleware } from 'redux'\r\n\r\n/**\r\n * Returns true if the passed value is \"plain\", i.e. a value that is either\r\n * directly JSON-serializable (boolean, number, string, array, plain object)\r\n * or `undefined`.\r\n *\r\n * @param val The value to check.\r\n *\r\n * @public\r\n */\r\nexport function isPlain(val: any) {\r\n  return (\r\n    typeof val === 'undefined' ||\r\n    val === null ||\r\n    typeof val === 'string' ||\r\n    typeof val === 'boolean' ||\r\n    typeof val === 'number' ||\r\n    Array.isArray(val) ||\r\n    isPlainObject(val)\r\n  )\r\n}\r\n\r\ninterface NonSerializableValue {\r\n  keyPath: string\r\n  value: unknown\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function findNonSerializableValue(\r\n  value: unknown,\r\n  path: ReadonlyArray<string> = [],\r\n  isSerializable: (value: unknown) => boolean = isPlain,\r\n  getEntries?: (value: unknown) => [string, any][]\r\n): NonSerializableValue | false {\r\n  let foundNestedSerializable: NonSerializableValue | false\r\n\r\n  if (!isSerializable(value)) {\r\n    return {\r\n      keyPath: path.join('.') || '<root>',\r\n      value: value\r\n    }\r\n  }\r\n\r\n  if (typeof value !== 'object' || value === null) {\r\n    return false\r\n  }\r\n\r\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value)\r\n\r\n  for (const [property, nestedValue] of entries) {\r\n    const nestedPath = path.concat(property)\r\n\r\n    if (!isSerializable(nestedValue)) {\r\n      return {\r\n        keyPath: nestedPath.join('.'),\r\n        value: nestedValue\r\n      }\r\n    }\r\n\r\n    if (typeof nestedValue === 'object') {\r\n      foundNestedSerializable = findNonSerializableValue(\r\n        nestedValue,\r\n        nestedPath,\r\n        isSerializable,\r\n        getEntries\r\n      )\r\n\r\n      if (foundNestedSerializable) {\r\n        return foundNestedSerializable\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Options for `createSerializableStateInvariantMiddleware()`.\r\n *\r\n * @public\r\n */\r\nexport interface SerializableStateInvariantMiddlewareOptions {\r\n  /**\r\n   * The function to check if a value is considered serializable. This\r\n   * function is applied recursively to every value contained in the\r\n   * state. Defaults to `isPlain()`.\r\n   */\r\n  isSerializable?: (value: any) => boolean\r\n  /**\r\n   * The function that will be used to retrieve entries from each\r\n   * value.  If unspecified, `Object.entries` will be used. Defaults\r\n   * to `undefined`.\r\n   */\r\n  getEntries?: (value: any) => [string, any][]\r\n\r\n  /**\r\n   * An array of action types to ignore when checking for serializability, Defaults to []\r\n   */\r\n  ignoredActions?: string[]\r\n}\r\n\r\n/**\r\n * Creates a middleware that, after every state change, checks if the new\r\n * state is serializable. If a non-serializable value is found within the\r\n * state, an error is printed to the console.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\r\nexport function createSerializableStateInvariantMiddleware(\r\n  options: SerializableStateInvariantMiddlewareOptions = {}\r\n): Middleware {\r\n  const { isSerializable = isPlain, getEntries, ignoredActions = [] } = options\r\n\r\n  return storeAPI => next => action => {\r\n    if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {\r\n      return next(action)\r\n    }\r\n\r\n    const foundActionNonSerializableValue = findNonSerializableValue(\r\n      action,\r\n      [],\r\n      isSerializable,\r\n      getEntries\r\n    )\r\n\r\n    if (foundActionNonSerializableValue) {\r\n      const { keyPath, value } = foundActionNonSerializableValue\r\n\r\n      console.error(\r\n        `A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`,\r\n        value,\r\n        '\\nTake a look at the logic that dispatched this action: ',\r\n        action,\r\n        '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)'\r\n      )\r\n    }\r\n\r\n    const result = next(action)\r\n\r\n    const state = storeAPI.getState()\r\n\r\n    const foundStateNonSerializableValue = findNonSerializableValue(\r\n      state,\r\n      [],\r\n      isSerializable,\r\n      getEntries\r\n    )\r\n\r\n    if (foundStateNonSerializableValue) {\r\n      const { keyPath, value } = foundStateNonSerializableValue\r\n\r\n      console.error(\r\n        `A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`,\r\n        value,\r\n        `\r\nTake a look at the reducer(s) handling this action type: ${action.type}.\r\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`\r\n      )\r\n    }\r\n\r\n    return result\r\n  }\r\n}\r\n","import { Middleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n/* START_REMOVE_UMD */\r\nimport createImmutableStateInvariantMiddleware from 'redux-immutable-state-invariant'\r\n/* STOP_REMOVE_UMD */\r\n\r\nimport {\r\n  createSerializableStateInvariantMiddleware,\r\n  SerializableStateInvariantMiddlewareOptions\r\n} from './serializableStateInvariantMiddleware'\r\n\r\nfunction isBoolean(x: any): x is boolean {\r\n  return typeof x === 'boolean'\r\n}\r\n\r\ninterface ThunkOptions<E = any> {\r\n  extraArgument: E\r\n}\r\n\r\ninterface ImmutableStateInvariantMiddlewareOptions {\r\n  isImmutable?: (value: any) => boolean\r\n  ignore?: string[]\r\n}\r\n\r\ninterface GetDefaultMiddlewareOptions {\r\n  thunk?: boolean | ThunkOptions\r\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions\r\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions\r\n}\r\n\r\n/**\r\n * Returns any array containing the default middleware installed by\r\n * `configureStore()`. Useful if you want to configure your store with a custom\r\n * `middleware` array but still keep the default set.\r\n *\r\n * @return The default middleware used by `configureStore()`.\r\n *\r\n * @public\r\n */\r\nexport function getDefaultMiddleware<S = any>(\r\n  options: GetDefaultMiddlewareOptions = {}\r\n): Middleware<{}, S>[] {\r\n  const {\r\n    thunk = true,\r\n    immutableCheck = true,\r\n    serializableCheck = true\r\n  } = options\r\n\r\n  let middlewareArray: Middleware<{}, S>[] = []\r\n\r\n  if (thunk) {\r\n    if (isBoolean(thunk)) {\r\n      middlewareArray.push(thunkMiddleware)\r\n    } else {\r\n      middlewareArray.push(\r\n        thunkMiddleware.withExtraArgument(thunk.extraArgument)\r\n      )\r\n    }\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (immutableCheck) {\r\n      /* PROD_START_REMOVE_UMD */\r\n\r\n      // UMD-ONLY: const createImmutableStateInvariantMiddleware = require('redux-immutable-state-invariant').default\r\n\r\n      let immutableOptions: ImmutableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(immutableCheck)) {\r\n        immutableOptions = immutableCheck\r\n      }\r\n\r\n      middlewareArray.unshift(\r\n        createImmutableStateInvariantMiddleware(immutableOptions)\r\n      )\r\n\r\n      /* PROD_STOP_REMOVE_UMD */\r\n    }\r\n\r\n    if (serializableCheck) {\r\n      let serializableOptions: SerializableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(serializableCheck)) {\r\n        serializableOptions = serializableCheck\r\n      }\r\n\r\n      middlewareArray.push(\r\n        createSerializableStateInvariantMiddleware(serializableOptions)\r\n      )\r\n    }\r\n  }\r\n\r\n  return middlewareArray\r\n}\r\n","import { Action } from 'redux'\r\nimport {\r\n  IsUnknownOrNonInferrable,\r\n  IfMaybeUndefined,\r\n  IfVoid,\r\n  IsAny\r\n} from './tsHelpers'\r\n\r\n/**\r\n * An action with a string type and an associated payload. This is the\r\n * type of action returned by `createAction()` action creators.\r\n *\r\n * @template P The type of the action's payload.\r\n * @template T the type used for the action type.\r\n * @template M The type of the action's meta (optional)\r\n * @template E The type of the action's error (optional)\r\n *\r\n * @public\r\n */\r\nexport type PayloadAction<\r\n  P = void,\r\n  T extends string = string,\r\n  M = never,\r\n  E = never\r\n> = {\r\n  payload: P\r\n  type: T\r\n} & ([M] extends [never]\r\n  ? {}\r\n  : {\r\n      meta: M\r\n    }) &\r\n  ([E] extends [never]\r\n    ? {}\r\n    : {\r\n        error: E\r\n      })\r\n\r\n/**\r\n * A \"prepare\" method to be used as the second parameter of `createAction`.\r\n * Takes any number of arguments and returns a Flux Standard Action without\r\n * type (will be added later) that *must* contain a payload (might be undefined).\r\n *\r\n * @public\r\n */\r\nexport type PrepareAction<P> =\r\n  | ((...args: any[]) => { payload: P })\r\n  | ((...args: any[]) => { payload: P; meta: any })\r\n  | ((...args: any[]) => { payload: P; error: any })\r\n  | ((...args: any[]) => { payload: P; meta: any; error: any })\r\n\r\n/**\r\n * Internal version of `ActionCreatorWithPreparedPayload`. Not to be used externally.\r\n *\r\n * @internal\r\n */\r\nexport type _ActionCreatorWithPreparedPayload<\r\n  PA extends PrepareAction<any> | void,\r\n  T extends string = string\r\n> = PA extends PrepareAction<infer P>\r\n  ? ActionCreatorWithPreparedPayload<\r\n      Parameters<PA>,\r\n      P,\r\n      T,\r\n      ReturnType<PA> extends {\r\n        error: infer E\r\n      }\r\n        ? E\r\n        : never,\r\n      ReturnType<PA> extends {\r\n        meta: infer M\r\n      }\r\n        ? M\r\n        : never\r\n    >\r\n  : void\r\n\r\n/**\r\n * Basic type for all action creators.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n */\r\ninterface BaseActionCreator<P, T extends string, M = never, E = never> {\r\n  type: T\r\n  match(action: Action<unknown>): action is PayloadAction<P, T, M, E>\r\n}\r\n\r\n/**\r\n * An action creator that takes multiple arguments that are passed\r\n * to a `PrepareAction` method to create the final Action.\r\n * @typeParam Args arguments for the action creator function\r\n * @typeParam P `payload` type\r\n * @typeParam T `type` name\r\n * @typeParam E optional `error` type\r\n * @typeParam M optional `meta` type\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithPreparedPayload<\r\n  Args extends unknown[],\r\n  P,\r\n  T extends string = string,\r\n  E = never,\r\n  M = never\r\n> extends BaseActionCreator<P, T, M, E> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with `Args` will return\r\n   * an Action with a payload of type `P` and (depending on the `PrepareAction`\r\n   * method used) a `meta`- and `error` property of types `M` and `E` respectively.\r\n   */\r\n  (...args: Args): PayloadAction<P, T, M, E>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that takes an optional payload of type `P`.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithOptionalPayload<P, T extends string = string>\r\n  extends BaseActionCreator<P, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} without arguments will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `undefined`\r\n   */\r\n  (payload?: undefined): PayloadAction<undefined, T>\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\r\n   */\r\n  <PT extends Diff<P, undefined>>(payload?: PT): PayloadAction<PT, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that takes no payload.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithoutPayload<T extends string = string>\r\n  extends BaseActionCreator<undefined, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `undefined`\r\n   */\r\n  (): PayloadAction<undefined, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that requires a payload of type P.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithPayload<P, T extends string = string>\r\n  extends BaseActionCreator<P, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\r\n   * If possible, `P` will be narrowed down to the exact type of the payload argument.\r\n   */\r\n  <PT extends P>(payload: PT): PayloadAction<PT, T>\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\r\n   */\r\n  (payload: P): PayloadAction<P, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` whose `payload` type could not be inferred. Accepts everything as `payload`.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithNonInferrablePayload<\r\n  T extends string = string\r\n> extends BaseActionCreator<unknown, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload\r\n   * of exactly the type of the argument.\r\n   */\r\n  <PT extends unknown>(payload: PT): PayloadAction<PT, T>\r\n}\r\n\r\n/**\r\n * An action creator that produces actions with a `payload` attribute.\r\n *\r\n * @typeParam P the `payload` type\r\n * @typeParam T the `type` of the resulting action\r\n * @typeParam PA if the resulting action is preprocessed by a `prepare` method, the signature of said method.\r\n *\r\n * @public\r\n */\r\nexport type PayloadActionCreator<\r\n  P = void,\r\n  T extends string = string,\r\n  PA extends PrepareAction<P> | void = void\r\n> = IfPrepareActionMethodProvided<\r\n  PA,\r\n  _ActionCreatorWithPreparedPayload<PA, T>,\r\n  // else\r\n  IsAny<\r\n    P,\r\n    ActionCreatorWithPayload<any, T>,\r\n    IsUnknownOrNonInferrable<\r\n      P,\r\n      ActionCreatorWithNonInferrablePayload<T>,\r\n      // else\r\n      IfVoid<\r\n        P,\r\n        ActionCreatorWithoutPayload<T>,\r\n        // else\r\n        IfMaybeUndefined<\r\n          P,\r\n          ActionCreatorWithOptionalPayload<P, T>,\r\n          // else\r\n          ActionCreatorWithPayload<P, T>\r\n        >\r\n      >\r\n    >\r\n  >\r\n>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass it's arguments to this method to calculate payload & meta.\r\n *\r\n * @public\r\n */\r\nexport function createAction<P = void, T extends string = string>(\r\n  type: T\r\n): PayloadActionCreator<P, T>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass it's arguments to this method to calculate payload & meta.\r\n *\r\n * @public\r\n */\r\nexport function createAction<\r\n  PA extends PrepareAction<any>,\r\n  T extends string = string\r\n>(\r\n  type: T,\r\n  prepareAction: PA\r\n): PayloadActionCreator<ReturnType<PA>['payload'], T, PA>\r\n\r\nexport function createAction(type: string, prepareAction?: Function): any {\r\n  function actionCreator(...args: any[]) {\r\n    if (prepareAction) {\r\n      let prepared = prepareAction(...args)\r\n      if (!prepared) {\r\n        throw new Error('prepareAction did not return an object')\r\n      }\r\n\r\n      return {\r\n        type,\r\n        payload: prepared.payload,\r\n        ...('meta' in prepared && { meta: prepared.meta }),\r\n        ...('error' in prepared && { error: prepared.error })\r\n      }\r\n    }\r\n    return { type, payload: args[0] }\r\n  }\r\n\r\n  actionCreator.toString = () => `${type}`\r\n\r\n  actionCreator.type = type\r\n\r\n  actionCreator.match = (action: Action<unknown>): action is PayloadAction =>\r\n    action.type === type\r\n\r\n  return actionCreator\r\n}\r\n\r\n/**\r\n * Returns the action type of the actions created by the passed\r\n * `createAction()`-generated action creator (arbitrary action creators\r\n * are not supported).\r\n *\r\n * @param action The action creator whose action type to get.\r\n * @returns The action type used by the action creator.\r\n *\r\n * @public\r\n */\r\nexport function getType<T extends string>(\r\n  actionCreator: PayloadActionCreator<any, T>\r\n): T {\r\n  return `${actionCreator}` as T\r\n}\r\n\r\n// helper types for more readable typings\r\n\r\ntype Diff<T, U> = T extends U ? never : T\r\n\r\ntype IfPrepareActionMethodProvided<\r\n  PA extends PrepareAction<any> | void,\r\n  True,\r\n  False\r\n> = PA extends (...args: any[]) => any ? True : False\r\n","import { Action } from 'redux'\r\nimport { CaseReducer, CaseReducers } from './createReducer'\r\n\r\nexport interface TypedActionCreator<Type extends string> {\r\n  (...args: any[]): Action<Type>\r\n  type: Type\r\n}\r\n\r\n/**\r\n * A builder for an action <-> reducer map.\r\n *\r\n * @public\r\n */\r\nexport interface ActionReducerMapBuilder<State> {\r\n  /**\r\n   * Add a case reducer for actions created by this action creator.\r\n   * @param actionCreator\r\n   * @param reducer\r\n   */\r\n  addCase<ActionCreator extends TypedActionCreator<string>>(\r\n    actionCreator: ActionCreator,\r\n    reducer: CaseReducer<State, ReturnType<ActionCreator>>\r\n  ): ActionReducerMapBuilder<State>\r\n  /**\r\n   * Add a case reducer for actions with the specified type.\r\n   * @param type\r\n   * @param reducer\r\n   */\r\n  addCase<Type extends string, A extends Action<Type>>(\r\n    type: Type,\r\n    reducer: CaseReducer<State, A>\r\n  ): ActionReducerMapBuilder<State>\r\n}\r\n\r\nexport function executeReducerBuilderCallback<S>(\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): CaseReducers<S, any> {\r\n  const actionsMap: CaseReducers<S, any> = {}\r\n  const builder = {\r\n    addCase(\r\n      typeOrActionCreator: string | TypedActionCreator<any>,\r\n      reducer: CaseReducer<S>\r\n    ) {\r\n      const type =\r\n        typeof typeOrActionCreator === 'string'\r\n          ? typeOrActionCreator\r\n          : typeOrActionCreator.type\r\n      if (type in actionsMap) {\r\n        throw new Error(\r\n          'addCase cannot be called with two reducers for the same action type'\r\n        )\r\n      }\r\n      actionsMap[type] = reducer\r\n      return builder\r\n    }\r\n  }\r\n  builderCallback(builder)\r\n  return actionsMap\r\n}\r\n","import createNextState, { Draft } from 'immer'\r\nimport { AnyAction, Action, Reducer } from 'redux'\r\nimport {\r\n  executeReducerBuilderCallback,\r\n  ActionReducerMapBuilder\r\n} from './mapBuilders'\r\n\r\n/**\r\n * Defines a mapping from action types to corresponding action object shapes.\r\n *\r\n * @deprecated This should not be used manually - it is only used for internal\r\n *             inference purposes and should not have any further value.\r\n *             It might be removed in the future.\r\n * @public\r\n */\r\nexport type Actions<T extends keyof any = string> = Record<T, Action>\r\n\r\n/**\r\n * An *case reducer* is a reducer function for a specific action type. Case\r\n * reducers can be composed to full reducers using `createReducer()`.\r\n *\r\n * Unlike a normal Redux reducer, a case reducer is never called with an\r\n * `undefined` state to determine the initial state. Instead, the initial\r\n * state is explicitly specified as an argument to `createReducer()`.\r\n *\r\n * In addition, a case reducer can choose to mutate the passed-in `state`\r\n * value directly instead of returning a new state. This does not actually\r\n * cause the store state to be mutated directly; instead, thanks to\r\n * [immer](https://github.com/mweststrate/immer), the mutations are\r\n * translated to copy operations that result in a new state.\r\n *\r\n * @public\r\n */\r\nexport type CaseReducer<S = any, A extends Action = AnyAction> = (\r\n  state: Draft<S>,\r\n  action: A\r\n) => S | void\r\n\r\n/**\r\n * A mapping from action types to case reducers for `createReducer()`.\r\n *\r\n * @deprecated This should not be used manually - it is only used\r\n *             for internal inference purposes and using it manually\r\n *             would lead to type erasure.\r\n *             It might be removed in the future.\r\n * @public\r\n */\r\nexport type CaseReducers<S, AS extends Actions> = {\r\n  [T in keyof AS]: AS[T] extends Action ? CaseReducer<S, AS[T]> : void\r\n}\r\n\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n *\r\n * @param initialState The initial state to be returned by the reducer.\r\n * @param actionsMap A mapping from action types to action-type-specific\r\n *   case reducers.\r\n *\r\n * @public\r\n */\r\nexport function createReducer<\r\n  S,\r\n  CR extends CaseReducers<S, any> = CaseReducers<S, any>\r\n>(initialState: S, actionsMap: CR): Reducer<S>\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n * @param initialState The initial state to be returned by the reducer.\r\n * @param builderCallback A callback that receives a *builder* object to define\r\n *   case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n *\r\n * @public\r\n */\r\nexport function createReducer<S>(\r\n  initialState: S,\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): Reducer<S>\r\n\r\nexport function createReducer<S>(\r\n  initialState: S,\r\n  mapOrBuilderCallback:\r\n    | CaseReducers<S, any>\r\n    | ((builder: ActionReducerMapBuilder<S>) => void)\r\n): Reducer<S> {\r\n  let actionsMap =\r\n    typeof mapOrBuilderCallback === 'function'\r\n      ? executeReducerBuilderCallback(mapOrBuilderCallback)\r\n      : mapOrBuilderCallback\r\n\r\n  return function(state = initialState, action): S {\r\n    // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\r\n    // than an Immutable<S>, and TypeScript cannot find out how to reconcile\r\n    // these two types.\r\n    return createNextState(state, (draft: Draft<S>) => {\r\n      const caseReducer = actionsMap[action.type]\r\n      return caseReducer ? caseReducer(draft, action) : undefined\r\n    })\r\n  }\r\n}\r\n","import {\r\n  createStore,\r\n  compose,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  Reducer,\r\n  ReducersMapObject,\r\n  Middleware,\r\n  Action,\r\n  AnyAction,\r\n  StoreEnhancer,\r\n  Store,\r\n  DeepPartial\r\n} from 'redux'\r\nimport {\r\n  composeWithDevTools,\r\n  EnhancerOptions as DevToolsOptions\r\n} from 'redux-devtools-extension'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\n\r\nimport isPlainObject from './isPlainObject'\r\nimport { getDefaultMiddleware } from './getDefaultMiddleware'\r\n\r\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production'\r\n\r\n/**\r\n * Callback function type, to be used in `ConfigureStoreOptions.enhancers`\r\n *\r\n * @public\r\n */\r\nexport type ConfigureEnhancersCallback = (\r\n  defaultEnhancers: StoreEnhancer[]\r\n) => StoreEnhancer[]\r\n\r\n/**\r\n * Options for `configureStore()`.\r\n *\r\n * @public\r\n */\r\nexport interface ConfigureStoreOptions<S = any, A extends Action = AnyAction> {\r\n  /**\r\n   * A single reducer function that will be used as the root reducer, or an\r\n   * object of slice reducers that will be passed to `combineReducers()`.\r\n   */\r\n  reducer: Reducer<S, A> | ReducersMapObject<S, A>\r\n\r\n  /**\r\n   * An array of Redux middleware to install. If not supplied, defaults to\r\n   * the set of middleware returned by `getDefaultMiddleware()`.\r\n   */\r\n  middleware?: Middleware<{}, S>[]\r\n\r\n  /**\r\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\r\n   *\r\n   * Additional configuration can be done by passing Redux DevTools options\r\n   */\r\n  devTools?: boolean | DevToolsOptions\r\n\r\n  /**\r\n   * The initial state, same as Redux's createStore.\r\n   * You may optionally specify it to hydrate the state\r\n   * from the server in universal apps, or to restore a previously serialized\r\n   * user session. If you use `combineReducers()` to produce the root reducer\r\n   * function (either directly or indirectly by passing an object as `reducer`),\r\n   * this must be an object with the same shape as the reducer map keys.\r\n   */\r\n  // NOTE: The needlessly complicated `S extends any ? S : S` instead of just\r\n  // `S` ensures that the TypeScript compiler doesn't attempt to infer `S`\r\n  // based on the value passed as `preloadedState`, which might be a partial\r\n  // state rather than the full thing.\r\n  preloadedState?: DeepPartial<S extends any ? S : S>\r\n\r\n  /**\r\n   * The store enhancers to apply. See Redux's `createStore()`.\r\n   * All enhancers will be included before the DevTools Extension enhancer.\r\n   * If you need to customize the order of enhancers, supply a callback\r\n   * function that will receive the original array (ie, `[applyMiddleware]`),\r\n   * and should return a new array (such as `[applyMiddleware, offline]`).\r\n   * If you only need to add middleware, you can use the `middleware` parameter instaead.\r\n   */\r\n  enhancers?: StoreEnhancer[] | ConfigureEnhancersCallback\r\n}\r\n\r\n/**\r\n * A Redux store returned by `configureStore()`. Supports dispatching\r\n * side-effectful _thunks_ in addition to plain actions.\r\n *\r\n * @public\r\n */\r\nexport interface EnhancedStore<S = any, A extends Action = AnyAction>\r\n  extends Store<S, A> {\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  dispatch: ThunkDispatch<S, any, A>\r\n}\r\n\r\n/**\r\n * A friendly abstraction over the standard Redux `createStore()` function.\r\n *\r\n * @param config The store configuration.\r\n * @returns A configured Redux store.\r\n *\r\n * @public\r\n */\r\nexport function configureStore<S = any, A extends Action = AnyAction>(\r\n  options: ConfigureStoreOptions<S, A>\r\n): EnhancedStore<S, A> {\r\n  const {\r\n    reducer = undefined,\r\n    middleware = getDefaultMiddleware(),\r\n    devTools = true,\r\n    preloadedState = undefined,\r\n    enhancers = undefined\r\n  } = options || {}\r\n\r\n  let rootReducer: Reducer<S, A>\r\n\r\n  if (typeof reducer === 'function') {\r\n    rootReducer = reducer\r\n  } else if (isPlainObject(reducer)) {\r\n    rootReducer = combineReducers(reducer)\r\n  } else {\r\n    throw new Error(\r\n      '\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers'\r\n    )\r\n  }\r\n\r\n  const middlewareEnhancer = applyMiddleware(...middleware)\r\n\r\n  let finalCompose = compose\r\n\r\n  if (devTools) {\r\n    finalCompose = composeWithDevTools({\r\n      // Enable capture of stack traces for dispatched Redux actions\r\n      trace: !IS_PRODUCTION,\r\n      ...(typeof devTools === 'object' && devTools)\r\n    })\r\n  }\r\n\r\n  let storeEnhancers: StoreEnhancer[] = [middlewareEnhancer]\r\n\r\n  if (Array.isArray(enhancers)) {\r\n    storeEnhancers = [middlewareEnhancer, ...enhancers]\r\n  } else if (typeof enhancers === 'function') {\r\n    storeEnhancers = enhancers(storeEnhancers)\r\n  }\r\n\r\n  const composedEnhancer = finalCompose(...storeEnhancers) as StoreEnhancer\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState as DeepPartial<S>,\r\n    composedEnhancer\r\n  )\r\n}\r\n","import { Reducer } from 'redux'\r\nimport {\r\n  createAction,\r\n  PayloadAction,\r\n  PayloadActionCreator,\r\n  PrepareAction,\r\n  ActionCreatorWithoutPayload,\r\n  _ActionCreatorWithPreparedPayload\r\n} from './createAction'\r\nimport { createReducer, CaseReducers, CaseReducer } from './createReducer'\r\nimport {\r\n  ActionReducerMapBuilder,\r\n  executeReducerBuilderCallback\r\n} from './mapBuilders'\r\n\r\n/**\r\n * An action creator atttached to a slice.\r\n *\r\n * @deprecated please use PayloadActionCreator directly\r\n *\r\n * @public\r\n */\r\nexport type SliceActionCreator<P> = PayloadActionCreator<P>\r\n\r\n/**\r\n * The return value of `createSlice`\r\n *\r\n * @public\r\n */\r\nexport interface Slice<\r\n  State = any,\r\n  CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>\r\n> {\r\n  /**\r\n   * The slice name.\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * The slice's reducer.\r\n   */\r\n  reducer: Reducer<State>\r\n\r\n  /**\r\n   * Action creators for the types of actions that are handled by the slice\r\n   * reducer.\r\n   */\r\n  actions: CaseReducerActions<CaseReducers>\r\n\r\n  /**\r\n   * The individual case reducer functions that were passed in the `reducers` parameter.\r\n   * This enables reuse and testing if they were defined inline when calling `createSlice`.\r\n   */\r\n  caseReducers: SliceDefinedCaseReducers<CaseReducers>\r\n}\r\n\r\n/**\r\n * Options for `createSlice()`.\r\n *\r\n * @public\r\n */\r\nexport interface CreateSliceOptions<\r\n  State = any,\r\n  CR extends SliceCaseReducers<State> = SliceCaseReducers<State>\r\n> {\r\n  /**\r\n   * The slice's name. Used to namespace the generated action types.\r\n   */\r\n  name: string\r\n\r\n  /**\r\n   * The initial state to be returned by the slice reducer.\r\n   */\r\n  initialState: State\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. For every action type, a matching action creator will be\r\n   * generated using `createAction()`.\r\n   */\r\n  reducers: ValidateSliceCaseReducers<State, CR>\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. These reducers should have existing action types used\r\n   * as the keys, and action creators will _not_ be generated.\r\n   * Alternatively, a callback that receives a *builder* object to define\r\n   * case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n   */\r\n  extraReducers?:\r\n    | CaseReducers<NoInfer<State>, any>\r\n    | ((builder: ActionReducerMapBuilder<NoInfer<State>>) => void)\r\n}\r\n\r\n/**\r\n * A CaseReducer with a `prepare` method.\r\n *\r\n * @public\r\n */\r\nexport type CaseReducerWithPrepare<State, Action extends PayloadAction> = {\r\n  reducer: CaseReducer<State, Action>\r\n  prepare: PrepareAction<Action['payload']>\r\n}\r\n\r\n/**\r\n * The type describing a slice's `reducers` option.\r\n *\r\n * @public\r\n */\r\nexport type SliceCaseReducers<State> = {\r\n  [K: string]:\r\n    | CaseReducer<State, PayloadAction<any>>\r\n    | CaseReducerWithPrepare<State, PayloadAction<any>>\r\n}\r\n\r\n/**\r\n * Derives the slice's `actions` property from the `reducers` options\r\n *\r\n * @public\r\n */\r\nexport type CaseReducerActions<CaseReducers extends SliceCaseReducers<any>> = {\r\n  [Type in keyof CaseReducers]: CaseReducers[Type] extends { prepare: any }\r\n    ? ActionCreatorForCaseReducerWithPrepare<CaseReducers[Type]>\r\n    : ActionCreatorForCaseReducer<CaseReducers[Type]>\r\n}\r\n\r\n/**\r\n * Get a `PayloadActionCreator` type for a passed `CaseReducerWithPrepare`\r\n *\r\n * @internal\r\n */\r\ntype ActionCreatorForCaseReducerWithPrepare<\r\n  CR extends { prepare: any }\r\n> = _ActionCreatorWithPreparedPayload<CR['prepare'], string>\r\n\r\n/**\r\n * Get a `PayloadActionCreator` type for a passed `CaseReducer`\r\n *\r\n * @internal\r\n */\r\ntype ActionCreatorForCaseReducer<CR> = CR extends (\r\n  state: any,\r\n  action: infer Action\r\n) => any\r\n  ? Action extends { payload: infer P }\r\n    ? PayloadActionCreator<P>\r\n    : ActionCreatorWithoutPayload\r\n  : ActionCreatorWithoutPayload\r\n\r\n/**\r\n * Extracts the CaseReducers out of a `reducers` object, even if they are\r\n * tested into a `CaseReducerWithPrepare`.\r\n *\r\n * @internal\r\n */\r\ntype SliceDefinedCaseReducers<CaseReducers extends SliceCaseReducers<any>> = {\r\n  [Type in keyof CaseReducers]: CaseReducers[Type] extends {\r\n    reducer: infer Reducer\r\n  }\r\n    ? Reducer\r\n    : CaseReducers[Type]\r\n}\r\n\r\n/**\r\n * Helper type. Passes T out again, but boxes it in a way that it cannot\r\n * \"widen\" the type by accident if it is a generic that should be inferred\r\n * from elsewhere.\r\n *\r\n * @internal\r\n */\r\ntype NoInfer<T> = [T][T extends any ? 0 : never]\r\n\r\n/**\r\n * Used on a SliceCaseReducers object.\r\n * Ensures that if a CaseReducer is a `CaseReducerWithPrepare`, that\r\n * the `reducer` and the `prepare` function use the same type of `payload`.\r\n *\r\n * Might do additional such checks in the future.\r\n *\r\n * This type is only ever useful if you want to write your own wrapper around\r\n * `createSlice`. Please don't use it otherwise!\r\n *\r\n * @public\r\n */\r\nexport type ValidateSliceCaseReducers<\r\n  S,\r\n  ACR extends SliceCaseReducers<S>\r\n> = ACR &\r\n  {\r\n    [P in keyof ACR]: ACR[P] extends {\r\n      reducer(s: S, action?: { payload: infer O }): any\r\n    }\r\n      ? {\r\n          prepare(...a: never[]): { payload: O }\r\n        }\r\n      : {}\r\n  }\r\n\r\nfunction getType(slice: string, actionKey: string): string {\r\n  return `${slice}/${actionKey}`\r\n}\r\n\r\n/**\r\n * A function that accepts an initial state, an object full of reducer\r\n * functions, and a \"slice name\", and automatically generates\r\n * action creators and action types that correspond to the\r\n * reducers and state.\r\n *\r\n * The `reducer` argument is passed to `createReducer()`.\r\n *\r\n * @public\r\n */\r\nexport function createSlice<\r\n  State,\r\n  CaseReducers extends SliceCaseReducers<State>\r\n>(\r\n  options: CreateSliceOptions<State, CaseReducers>\r\n): Slice<State, CaseReducers> {\r\n  const { name, initialState } = options\r\n  if (!name) {\r\n    throw new Error('`name` is a required option for createSlice')\r\n  }\r\n  const reducers = options.reducers || {}\r\n  const extraReducers =\r\n    typeof options.extraReducers === 'undefined'\r\n      ? {}\r\n      : typeof options.extraReducers === 'function'\r\n      ? executeReducerBuilderCallback(options.extraReducers)\r\n      : options.extraReducers\r\n\r\n  const reducerNames = Object.keys(reducers)\r\n\r\n  const sliceCaseReducersByName: Record<string, CaseReducer> = {}\r\n  const sliceCaseReducersByType: Record<string, CaseReducer> = {}\r\n  const actionCreators: Record<string, Function> = {}\r\n\r\n  reducerNames.forEach(reducerName => {\r\n    const maybeReducerWithPrepare = reducers[reducerName]\r\n    const type = getType(name, reducerName)\r\n\r\n    let caseReducer: CaseReducer<State, any>\r\n    let prepareCallback: PrepareAction<any> | undefined\r\n\r\n    if ('reducer' in maybeReducerWithPrepare) {\r\n      caseReducer = maybeReducerWithPrepare.reducer\r\n      prepareCallback = maybeReducerWithPrepare.prepare\r\n    } else {\r\n      caseReducer = maybeReducerWithPrepare\r\n    }\r\n\r\n    sliceCaseReducersByName[reducerName] = caseReducer\r\n    sliceCaseReducersByType[type] = caseReducer\r\n    actionCreators[reducerName] = prepareCallback\r\n      ? createAction(type, prepareCallback)\r\n      : createAction(type)\r\n  })\r\n\r\n  const finalCaseReducers = { ...extraReducers, ...sliceCaseReducersByType }\r\n  const reducer = createReducer(initialState, finalCaseReducers as any)\r\n\r\n  return {\r\n    name,\r\n    reducer,\r\n    actions: actionCreators as any,\r\n    caseReducers: sliceCaseReducersByName as any\r\n  }\r\n}\r\n"],"names":["result","root","Symbol","self","window","global","module","Function","observable","ponyfill","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","createStore","reducer","preloadedState","enhancer","_ref2","arguments","Error","undefined","currentReducer","currentState","currentListeners","nextListeners","isDispatching","ensureCanMutateNextListeners","slice","getState","subscribe","listener","isSubscribed","push","index","indexOf","splice","dispatch","action","obj","proto","Object","getPrototypeOf","isPlainObject","type","listeners","i","length","replaceReducer","nextReducer","$$observable","_ref","outerSubscribe","observer","TypeError","observeState","next","unsubscribe","this","getUndefinedStateErrorMessage","key","actionType","String","combineReducers","reducers","reducerKeys","keys","finalReducers","shapeAssertionError","finalReducerKeys","forEach","assertReducerShape","e","state","hasChanged","nextState","_i","_key","previousStateForKey","nextStateForKey","errorMessage","bindActionCreator","actionCreator","apply","_defineProperty","value","defineProperty","enumerable","configurable","writable","_objectSpread","target","source","ownKeys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","compose","_len","funcs","Array","arg","reduce","a","b","applyMiddleware","middlewares","store","_dispatch","middlewareAPI","chain","map","middleware","NOTHING","DRAFTABLE","for","DRAFT_STATE","isDraft","isDraftable","isArray","prototype","constructor","const","assign","let","has","Reflect","getOwnPropertyNames","shallowCopy","base","invokeGetters","clone","create","desc","get","call","each","cb","isEnumerable","prop","thing","hasOwnProperty","is","x","y","cloned","deepFreeze","isFrozen","freeze","ImmerScope","parent","drafts","canAutoFreeze","patches","revoke","draft","usePatches","patchListener","inversePatches","leave","current","enter","descriptors","revoked","copy","peek","finalizing","markChanged","modified","prepareCopy","clonePotentialDraft","assertUnrevoked","JSON","stringify","markChangesSweep","hasArrayChanges","hasObjectChanges","baseValue","descriptor","scope","isReplaced","markChangesRecursively","object","assigned","createProxy","set","proxyProperty","finalized","Proxy","revocable","arrayTraps","objectTraps","proxy","owner","setPrototypeOf","fn","deleteProperty","isNaN","parseInt","applyPatches","patch","path","op","configDefaults","useProxies","autoFreeze","process","name","onAssign","onDelete","onCopy","Immer","config","setUseProxies","produce","bind","recipe","defaultBase","args","hasError","Promise","then","processResult","error","maybeFreeze","produceWithPatches","arg1","arg2","arg3","p","ip","createDraft","isManual","finishDraft","setAutoFreeze","modernProxy","legacyProxy","baseDraft","willFinalize","finalize","finalizeTree","basePath","delta","start","end","replaceCount","generateArrayPatches","assignedValue","origValue","generateObjectPatches","generatePatches","rootPath","needPatches","finalizeProperty","isDraftProp","deep","immer","defaultEqualityCheck","areArgumentsShallowlyEqual","equalityCheck","prev","getDependencies","dependencies","every","dep","dependencyTypes","createSelector","memoize","memoizeOptions","_len2","_key2","recomputations","resultFunc","pop","memoizedResultFunc","selector","params","resetRecomputations","createSelectorCreator","func","lastArgs","lastResult","require$$0","exports","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","__REDUX_DEVTOOLS_EXTENSION__","noop","createThunkMiddleware","extraArgument","thunk","isPlain","val","findNonSerializableValue","isSerializable","getEntries","foundNestedSerializable","keyPath","entries","nestedValue","nestedPath","options","middlewareArray","thunkMiddleware","createAction","prepareAction","prepared","payload","meta","match","executeReducerBuilderCallback","builderCallback","actionsMap","builder","addCase","typeOrActionCreator","createReducer","initialState","mapOrBuilderCallback","createNextState","caseReducer","withExtraArgument","actionCreators","boundActionCreators","rootReducer","getDefaultMiddleware","devTools","enhancers","middlewareEnhancer","finalCompose","composeWithDevTools","trace","storeEnhancers","ignoredActions","storeAPI","foundActionNonSerializableValue","console","foundStateNonSerializableValue","extraReducers","reducerNames","sliceCaseReducersByName","sliceCaseReducersByType","reducerName","prepareCallback","maybeReducerWithPrepare","prepare","actions","caseReducers"],"mappings":"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"}